
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE DA_PROC_CHECK_QTV(MESS OUT VARCHAR2)
AS
    U NUMBER;
    U2 NUMBER;
    USERR_NAME VARCHAR2(50);
BEGIN 
    SELECT USER INTO USERR_NAME FROM DUAL;
    
    SELECT COUNT(GRANTED_ROLE) INTO U FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_QUANTRIVIEN' AND GRANTEE = USERR_NAME;
    SELECT COUNT(GRANTED_ROLE) INTO U2 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE LIKE 'DA_RL_%' AND GRANTEE = USERR_NAME AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
     IF U = 1 
     THEN
        MESS := 'QTV';
    ELSIF U2 != 0
    THEN
        MESS := 'NV';
    END IF;
END DA_PROC_CHECK_QTV;
/
GRANT EXECUTE ON DA_PROC_CHECK_QTV TO DA_RL_NHANVIEN;

SELECT COUNT(GRANTED_ROLE) FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE LIKE 'DA_RL_%' AND GRANTEE = 'NV185' AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';


CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_INFO(P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
         RAW_KEY2 RAW(32);
         DE_LUONG VARCHAR2(1000);
         Y RAW(1000);
         DE_PC VARCHAR2(1000);
    BEGIN
        SELECT RAW_KEY INTO RAW_KEY2 FROM DA_TABLE_KEY;
        SELECT LUONG INTO DE_LUONG FROM DA_VIEW_INFO;
        Y :=  DBMS_CRYPTO.DECRYPT( SRC => DE_LUONG,
                                                                                TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                                                KEY => RAW_KEY2);
        DE_LUONG := UTL_RAW.CAST_TO_VARCHAR2(Y);
        SELECT PHUCAP INTO DE_PC FROM DA_VIEW_INFO;
        Y :=  DBMS_CRYPTO.DECRYPT( SRC => DE_PC,
                                                                                TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                                                KEY => RAW_KEY2);
        DE_PC := UTL_RAW.CAST_TO_VARCHAR2(Y);
           OPEN P_DS_NGDUNG FOR
        SELECT MANV,TENNV,PHAI,NGAYSINH,DIACHI,SODT,DE_LUONG AS LUONG ,DE_PC AS PHUCAP,VAITRO, MANQL,PHG FROM DA_VIEW_INFO;
    END DA_PROC_SELECT_INFO;
/
GRANT EXECUTE ON DA_PROC_SELECT_INFO TO DA_RL_NHANVIEN;

CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_MY_PC(P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
     OPEN P_DS_NGDUNG FOR
      SELECT * FROM DA_VIEW_MY_PHANCONG;
    END DA_PROC_SELECT_MY_PC;
/
GRANT EXECUTE ON DA_PROC_SELECT_MY_PC TO DA_RL_NHANVIEN;


CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_PHONGBAN(P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
     OPEN P_DS_NGDUNG FOR
      SELECT * FROM DA_TABLE_PHONGBAN;
    END DA_PROC_SELECT_PHONGBAN;
/
GRANT EXECUTE ON DA_PROC_SELECT_PHONGBAN TO DA_RL_NHANVIEN;
/
CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_DEAN(P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
     OPEN P_DS_NGDUNG FOR
      SELECT * FROM DA_TABLE_DEAN;
    END DA_PROC_SELECT_DEAN;
/
GRANT EXECUTE ON DA_PROC_SELECT_DEAN TO DA_RL_NHANVIEN;
/
CREATE OR REPLACE PROCEDURE DA_PROC_UPDATE_MY_INFO(DC IN VARCHAR2,NS IN VARCHAR2,SDT IN VARCHAR2)
AS
    NGS2 DATE;
BEGIN 
    IF DC IS NOT NULL
    THEN
        UPDATE NGAN.DA_VIEW_INFO SET DIACHI = DC;
    END IF;
    IF NS IS NOT NULL
    THEN
        UPDATE NGAN.DA_VIEW_INFO SET NGAYSINH = TO_DATE(NS,'DD-MON-YY');
    END IF;
     IF SDT IS NOT NULL
    THEN
        UPDATE DA_VIEW_INFO SET SODT = SDT;
    END IF;
END DA_PROC_UPDATE_MY_INFO;
/
GRANT EXECUTE ON DA_PROC_UPDATE_MY_INFO TO DA_RL_NHANVIEN;
/
CREATE OR REPLACE PROCEDURE DA_PROC_CHECK_PRIV_2(MESS OUT VARCHAR2)
AS
    U1 NUMBER;
    U2 NUMBER;
    U3 NUMBER;
    U4 NUMBER;
    U5 NUMBER;
    U6 NUMBER;
    USERR_NAME VARCHAR2(50);
BEGIN 
    SELECT USER INTO USERR_NAME FROM DUAL;
    SELECT COUNT(GRANTED_ROLE) INTO U1 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_QLTRUCTIEP' AND GRANTEE = USERR_NAME AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
    SELECT COUNT(GRANTED_ROLE) INTO U2 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_TRUONGPHONG' AND GRANTEE = USERR_NAME AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
    SELECT COUNT(GRANTED_ROLE) INTO U3 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_TAICHINH' AND GRANTEE = USERR_NAME AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
    SELECT COUNT(GRANTED_ROLE) INTO U4 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_NHANSU' AND GRANTEE = USERR_NAME AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
    SELECT COUNT(GRANTED_ROLE) INTO U5 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_TRUONGDEAN' AND GRANTEE = USERR_NAME AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
    SELECT COUNT(GRANTED_ROLE) INTO U6 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_BANGIAMDOC' AND GRANTEE = USERR_NAME AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
     IF U1 = 1 
     THEN
        MESS := 'QL';
    ELSIF U2 = 1
    THEN
        MESS := 'TP';
     ELSIF U3 = 1
    THEN
        MESS := 'TC';
     ELSIF U4 = 1
    THEN
        MESS := 'NS';
    ELSIF U5 = 1
    THEN
        MESS := 'TDA';
    ELSIF U6 = 1
    THEN
        MESS := 'GD';
    ELSE 
        MESS := 'NO';
    END IF;
END DA_PROC_CHECK_PRIV_2;
/
GRANT EXECUTE ON DA_PROC_CHECK_PRIV_2 TO DA_RL_NHANVIEN;
/
CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_MY_NV (P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
           OPEN P_DS_NGDUNG FOR
        SELECT * FROM NGAN.DA_VIEW_MY_NV;
    END DA_PROC_SELECT_MY_NV  ;
/
GRANT EXECUTE ON DA_PROC_SELECT_MY_NV TO DA_RL_QLTRUCTIEP;
GRANT EXECUTE ON DA_PROC_SELECT_MY_NV TO DA_RL_TRUONGPHONG;
/
BEGIN 
EXECUTE IMMEDIATE 'DROP TABLE'||' DA_TABLE_NV_TEMP CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
CREATE TABLE DA_TABLE_NV_TEMP AS SELECT * FROM DA_TABLE_NHANVIEN;

CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_MY_NV_PC (P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
BEGIN
        OPEN P_DS_NGDUNG FOR
        SELECT * FROM DA_VIEW_MY_NV;
    END DA_PROC_SELECT_MY_NV_PC;
/
GRANT EXECUTE ON DA_PROC_SELECT_MY_NV_PC  TO DA_RL_QLTRUCTIEP;
GRANT EXECUTE ON DA_PROC_SELECT_MY_NV_PC  TO DA_RL_TRUONGPHONG;

/



GRANT SELECT, UPDATE ON DA_TABLE_NV_TEMP TO DA_RL_TAICHINH;
CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_TC_NV(P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
        RAW_KEY2 RAW(32);
         DE_LUONG VARCHAR2(1000);
         Y RAW(1000);
         DE_PC VARCHAR2(1000);
BEGIN
      SELECT RAW_KEY INTO RAW_KEY2 FROM DA_TABLE_KEY;
         FOR R IN ( SELECT MANV, LUONG, PHUCAP FROM DA_TABLE_NHANVIEN) LOOP
                 SELECT LUONG INTO DE_LUONG FROM DA_TABLE_NHANVIEN WHERE MANV = R.MANV;
                    Y :=  DBMS_CRYPTO.DECRYPT( SRC => DE_LUONG,
                                                                                            TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                                                            KEY => RAW_KEY2);
                    DE_LUONG := UTL_RAW.CAST_TO_VARCHAR2(Y);
                    SELECT PHUCAP INTO DE_PC FROM DA_TABLE_NHANVIEN WHERE MANV = R.MANV;
                    Y :=  DBMS_CRYPTO.DECRYPT( SRC => DE_PC,
                                                                                            TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                                                            KEY => RAW_KEY2);
                    DE_PC := UTL_RAW.CAST_TO_VARCHAR2(Y);
                    UPDATE DA_TABLE_NV_TEMP SET LUONG = DE_LUONG, PHUCAP = DE_PC WHERE MANV = R.MANV;
           END LOOP;
           OPEN P_DS_NGDUNG FOR
        SELECT * FROM NGAN.DA_TABLE_NV_TEMP;
    END DA_PROC_SELECT_TC_NV;
/
GRANT EXECUTE ON DA_PROC_SELECT_TC_NV TO DA_RL_TAICHINH;
/
CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_PHANCONG (P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
     OPEN P_DS_NGDUNG FOR
      SELECT * FROM DA_TABLE_PHANCONG;
    END DA_PROC_SELECT_PHANCONG;
/
GRANT EXECUTE ON DA_PROC_SELECT_PHANCONG TO DA_RL_TAICHINH;

/
CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_NV_NHANSU (P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
     OPEN P_DS_NGDUNG FOR
      SELECT * FROM DA_VIEW_ALL_NV;
    END DA_PROC_SELECT_NV_NHANSU;
/
GRANT EXECUTE ON DA_PROC_SELECT_NV_NHANSU TO DA_RL_NHANSU;
GRANT EXECUTE ON DA_PROC_SELECT_PHONGBAN TO DA_RL_NHANSU;

GRANT EXECUTE ON DA_PROC_SELECT_DEAN TO DA_RL_TRUONGDEAN;
GRANT EXECUTE ON DA_PROC_SELECT_PHONGBAN TO DA_RL_TRUONGDEAN;

/
CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_KEY (P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
     OPEN P_DS_NGDUNG FOR
      SELECT KEY_K FROM DA_TABLE_KEY;
    END DA_PROC_SELECT_KEY;
/
GRANT EXECUTE ON DA_PROC_SELECT_KEY TO DA_RL_BANGIAMDOC;
/
CREATE OR REPLACE PROCEDURE DA_PROC_SELECT_DIARY (P_DS_NGDUNG OUT SYS_REFCURSOR)
AS
    BEGIN
    INSERT INTO DA_TABLE_DIARY 
    SELECT DBUSERNAME, EVENT_TIMESTAMP, ACTION_NAME, SQL_TEXT, FGA_POLICY_NAME, CLIENT_PROGRAM_NAME
    FROM UNIFIED_AUDIT_TRAIL AU WHERE AU.FGA_POLICY_NAME LIKE 'DA_%' AND  DBUSERNAME NOT IN(SELECT DBUSERNAME FROM DA_TABLE_DIARY DA WHERE AU.DBUSERNAME = DA.DBUSERNAME AND DA.EVENT_TIMESTAMP = AU.EVENT_TIMESTAMP);

     OPEN P_DS_NGDUNG FOR
      SELECT * FROM DA_TABLE_DIARY ;
    END  DA_PROC_SELECT_DIARY;
/
GRANT EXECUTE ON  DA_PROC_SELECT_DIARY TO DA_RL_BANGIAMDOC;
/
CREATE OR REPLACE PROCEDURE DA_PROC_I_MY_NV_PC (DE IN VARCHAR2,NV IN VARCHAR2)
AS
    DE_COUNT NUMBER;
    NV_COUNT NUMBER;
    I_T NUMBER;
    BEGIN
    SELECT COUNT(MADA) INTO DE_COUNT FROM DA_TABLE_DEAN WHERE MADA = DE;
    SELECT COUNT(MANV) INTO NV_COUNT FROM NGAN.DA_VIEW_MY_NV WHERE MANV = NV;
    SELECT COUNT(MADA) INTO I_T FROM NGAN.DA_TABLE_PHANCONG WHERE MADA = DE AND MANV = NV;
    IF DE_COUNT = 1 AND NV_COUNT = 1 AND I_T = 0
    THEN
        INSERT INTO DA_TABLE_PHANCONG(MADA, MANV) VALUES(DE,NV);
    END IF;
    END DA_PROC_I_MY_NV_PC;
/
GRANT EXECUTE ON  DA_PROC_I_MY_NV_PC TO DA_RL_TRUONGPHONG;

/
CREATE OR REPLACE PROCEDURE DA_PROC_DELE_MY_NV_PC (DE IN VARCHAR2,NV IN VARCHAR2)
AS
    DE_COUNT NUMBER;
    BEGIN
    SELECT COUNT(MADA) INTO DE_COUNT FROM DA_TABLE_PHANCONG WHERE MADA = DE AND MANV = NV;
    IF DE_COUNT = 1
    THEN
        DELETE FROM DA_TABLE_PHANCONG WHERE MADA = DE AND MANV = NV;
    END IF;
    END DA_PROC_DELE_MY_NV_PC;
/
GRANT EXECUTE ON DA_PROC_DELE_MY_NV_PC TO DA_RL_TRUONGPHONG;

/
CREATE OR REPLACE PROCEDURE DA_PROC_U_MY_NV_PC (DE IN VARCHAR2,NV IN VARCHAR2, TG IN VARCHAR)
AS
    DE_COUNT NUMBER;
    BEGIN
    SELECT COUNT(MADA) INTO DE_COUNT FROM DA_TABLE_PHANCONG WHERE MADA = DE AND MANV = NV;
    IF DE_COUNT = 1
    THEN
        UPDATE NGAN.DA_TABLE_PHANCONG SET THOIGIAN = TO_NUMBER(TG) WHERE MADA = DE AND MANV = NV;
    END IF;
    END DA_PROC_U_MY_NV_PC;
/
GRANT EXECUTE ON DA_PROC_U_MY_NV_PC TO DA_RL_TRUONGPHONG;

/
CREATE OR REPLACE PROCEDURE DA_PROC_U_TC_L(NV IN VARCHAR2,PI IN VARCHAR2, VT IN VARCHAR2, QL IN VARCHAR2, P IN VARCHAR2, L IN VARCHAR2, PC IN VARCHAR2)
AS
    CMN VARCHAR2(1000);
    DE_COUNT NUMBER;
    BEGIN
    CMN := '';
    IF NV IS NOT NULL
    THEN
        CMN := 'MANV = '|| NV;
    END IF;
    IF PI IS NOT NULL
    THEN
        CMN := CMN + ' AND PHAI = '|| PI;
    END IF;
    IF VT IS NOT NULL
    THEN
         CMN := CMN + ' AND VAITRO = '|| VT;
    END IF;
        IF QL IS NOT NULL
    THEN
         CMN := CMN + ' AND  MANQL = '|| QL;
    END IF;
      IF P IS NOT NULL
    THEN
        CMN := CMN + ' AND PHG = '|| P;
    END IF;
    EXECUTE IMMEDIATE 'UPDATE DA_TABLE_NHANVIEN SET LUONG = '|| L || ', PHUCAP = '|| PC||' WHERE '|| CMN;
    END DA_PROC_U_TC_L;
/
GRANT EXECUTE ON DA_PROC_U_TC_L TO DA_RL_TAICHINH;

/
CREATE OR REPLACE PROCEDURE DA_PROC_U_KEY(K VARCHAR2, MESS OUT VARCHAR2)
AS
        RAW_KEY1 RAW(32);
        URS VARCHAR(100);
        RAW_KEY2 RAW(32);
        DE_LUONG VARCHAR2(1000);
         Y RAW(1000);
         DE_PC VARCHAR2(1000);
    BEGIN
    SELECT USER INTO URS FROM DUAL;
    IF URS LIKE 'TGD'
    THEN
        SELECT RAW_KEY INTO RAW_KEY1 FROM DA_TABLE_KEY;
        UPDATE DA_TABLE_KEY SET KEY_K = K;
        RAW_KEY2 := UTL_RAW.CAST_TO_RAW('NHOM3_MAIYEUHETHONGTHONGTIN');
         UPDATE DA_TABLE_KEY SET RAW_KEY = RAW_KEY2 WHERE KEY_K = K;
         FOR R IN ( SELECT MANV, LUONG, PHUCAP FROM DA_TABLE_NHANVIEN) LOOP
                 SELECT LUONG INTO DE_LUONG FROM DA_TABLE_NHANVIEN WHERE MANV = R.MANV;
                    Y :=  DBMS_CRYPTO.DECRYPT( SRC => DE_LUONG,
                                                                                            TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                                                            KEY => RAW_KEY1);
                         Y :=  DBMS_CRYPTO.ENCRYPT( SRC => Y,
                                                    TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                    KEY => RAW_KEY2);
                    DE_LUONG := UTL_RAW.CAST_TO_VARCHAR2(Y);
                    SELECT PHUCAP INTO DE_PC FROM DA_TABLE_NHANVIEN WHERE MANV = R.MANV;
                    Y :=  DBMS_CRYPTO.DECRYPT( SRC => DE_PC,
                                                                                            TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                                                            KEY => RAW_KEY1);
                     Y :=  DBMS_CRYPTO.ENCRYPT( SRC => Y,
                                                    TYP => DBMS_CRYPTO.DES_CBC_PKCS5,
                                                    KEY => RAW_KEY2);
                    DE_PC := UTL_RAW.CAST_TO_VARCHAR2(Y);
                    UPDATE DA_TABLE_NHANVIEN SET LUONG = DE_LUONG, PHUCAP = DE_PC WHERE MANV = R.MANV;
           END LOOP;
    ELSE
        MESS :='NO';
    END IF;
    END DA_PROC_U_KEY;
/
GRANT EXECUTE ON DA_PROC_U_KEY TO DA_RL_BANGIAMDOC;

CREATE OR REPLACE FUNCTION DA_POLICY_U_KEY (P_SCHEMA VARCHAR2, P_OBJ VARCHAR2)
RETURN VARCHAR2
IS
    URS VARCHAR2(60);
    QLCHECK NUMBER;
BEGIN
    URS := SYS_CONTEXT('USERENV','SESSION_USER');
    SELECT COUNT(GRANTEE) INTO QLCHECK FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_BANGIAMDOC' AND GRANTEE = URS;
    IF QLCHECK = 1 AND URS LIKE 'TGD%'
    THEN
        RETURN '1=1';
    ELSE
        RETURN '1= 0';
    END IF;
END;
/
BEGIN
    DBMS_RLS.ADD_POLICY(
        object_schema => 'NGAN',
        object_name => 'DA_TABLE_KEY',
        policy_name => 'DA_POLICY_U_KEY ',
        function_schema => 'NGAN',
        policy_function => 'DA_POLICY_U_KEY ',
        statement_types => 'UPDATE',
        update_check     => TRUE
    );
END;
/
CREATE OR REPLACE FUNCTION DA_POLICY_SELECT_L_NV (P_SCHEMA VARCHAR2, P_OBJ VARCHAR2)
RETURN VARCHAR2
IS
    URS VARCHAR2(60);
    QLCHECK NUMBER;
BEGIN
    URS := SYS_CONTEXT('USERENV','SESSION_USER');
    SELECT COUNT(GRANTEE) INTO QLCHECK FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_TAICHINH' AND GRANTEE = URS AND URS !='NGAN' AND GRANTED_ROLE != 'DA_RL_QUANTRIVIEN';
    IF QLCHECK = 1
    THEN
        RETURN '1=1';
    ELSE
        RETURN '1= 0';
    END IF;
END;
/
BEGIN
    DBMS_RLS.ADD_POLICY(
        object_schema => 'NGAN',
        object_name => 'DA_TABLE_NV_TEMP',
        policy_name => 'DA_POLICY_SELECT_L_NV',
        function_schema => 'NGAN',
        policy_function => 'DA_POLICY_SELECT_L_NV',
        statement_types => 'UPDATE, SELECT',
        update_check     => TRUE
    );
END;
/

GRANT UPDATE ON DA_TABLE_KEY TO TGD;