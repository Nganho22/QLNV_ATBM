
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
-- PRIV OF NHANVIEN
CREATE OR REPLACE VIEW DA_VIEW_INFO
AS
 SELECT * FROM DA_TABLE_NHANVIEN
 WHERE NGAN.DA_TABLE_NHANVIEN.MANV = SYS_CONTEXT('USERENV','SESSION_USER') WITH CHECK OPTION;
 
 GRANT SELECT ON DA_VIEW_INFO TO DA_RL_NHANVIEN;
 
 --DROP TRIGGER DA_UTR_UPDATE_INFO;
 
CREATE OR REPLACE TRIGGER DA_UTR_UPDATE_INFO
INSTEAD OF UPDATE ON DA_VIEW_INFO FOR EACH ROW
DECLARE
    URS VARCHAR2(50);
BEGIN
     SELECT USER INTO URS FROM DUAL;
    IF :NEW.NGAYSINH IS NOT NULL
    THEN
        UPDATE DA_TABLE_NHANVIEN SET NGAYSINH = :NEW.NGAYSINH WHERE MANV = URS;
    END IF;
     IF :NEW.DIACHI IS NOT NULL
    THEN
        UPDATE DA_TABLE_NHANVIEN SET DIACHI = :NEW.DIACHI WHERE MANV = URS;
    END IF;
      IF :NEW.SODT IS NOT NULL
    THEN
        UPDATE DA_TABLE_NHANVIEN SET SODT = :NEW.SODT WHERE MANV = URS;
    END IF;
END;
/
GRANT UPDATE(NGAYSINH, DIACHI, SODT) ON DA_VIEW_INFO TO DA_RL_NHANVIEN;

CREATE OR REPLACE VIEW DA_VIEW_MY_PHANCONG
AS
 SELECT * FROM DA_TABLE_PHANCONG
 WHERE MANV = SYS_CONTEXT('USERENV','SESSION_USER') WITH CHECK OPTION;

GRANT SELECT ON DA_VIEW_MY_PHANCONG TO DA_RL_NHANVIEN;

GRANT SELECT ON DA_TABLE_PHONGBAN TO DA_RL_NHANVIEN;
GRANT SELECT ON DA_TABLE_DEAN TO DA_RL_NHANVIEN;
--TEST
UPDATE DA_TABLE_PHANCONG SET MANV ='NV185' WHERE MADA = 'DA1B';

-- PRIV OF QL & TRP OF SELECT NV

CREATE OR REPLACE VIEW DA_VIEW_MY_NV
AS
 SELECT MANV,TENNV,PHAI,NGAYSINH,DIACHI,SODT, VAITRO, MANQL,PHG FROM DA_TABLE_NHANVIEN;
 /
DECLARE
    L_COUNT NUMBER;
BEGIN
    SELECT COUNT(POLICY_NAME) INTO L_COUNT FROM USER_POLICIES WHERE POLICY_NAME = 'DA_POLICY_XEM_NV'
                                                                                                                                                        AND OBJECT_NAME = 'DA_VIEW_MY_NV' AND
                                                                                                                                                    PF_OWNER = 'NGAN';
        IF L_COUNT >0 
        THEN
            DBMS_RLS.drop_policy(
                                       object_schema => 'NGAN',
                                        object_name => 'DA_VIEW_MY_NV',
                                               policy_name => 'DA_POLICY_XEM_NV'
    );
    END IF;
END;
/
CREATE OR REPLACE FUNCTION DA_POLICY_XEM_NV (P_SCHEMA VARCHAR2, P_OBJ VARCHAR2)
RETURN VARCHAR2
IS
    URS VARCHAR2(60);
    QLCHECK NUMBER;
    TRPCHECK NUMBER;
    PHONG VARCHAR2(10);
BEGIN
    URS := SYS_CONTEXT('USERENV','SESSION_USER');
    SELECT COUNT(GRANTEE) INTO QLCHECK FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_QLTRUCTIEP' AND GRANTEE = URS;
    SELECT COUNT(GRANTEE) INTO TRPCHECK FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DA_RL_TRUONGPHONG' AND GRANTEE = URS;
    IF QLCHECK = 1
    THEN
        RETURN 'MANQL = '''||URS||'''';
    ELSIF TRPCHECK = 1
    THEN
        SELECT MAPB INTO PHONG FROM DA_TABLE_PHONGBAN WHERE TRPHG = URS;
        RETURN  'PHG = '''||PHONG||'''';
    ELSE
        RETURN '1= 0';
    END IF;
END;
/
BEGIN
    DBMS_RLS.ADD_POLICY(
        object_schema => 'NGAN',
        object_name => 'DA_VIEW_MY_NV',
        policy_name => 'DA_POLICY_XEM_NV',
        function_schema => 'NGAN',
        policy_function => 'DA_POLICY_XEM_NV',
        statement_types => 'SELECT',
        update_check     => TRUE
    );
END;
/
GRANT SELECT ON DA_VIEW_MY_NV TO DA_RL_QLTRUCTIEP;
GRANT SELECT ON DA_VIEW_MY_NV TO DA_RL_TRUONGPHONG;
--PRIV OF QL & TRP OF PHANCONG
CREATE OR REPLACE VIEW DA_VIEW_MY_NV_PHANCONG
AS
  SELECT * FROM DA_TABLE_PHANCONG WHERE MANV IN (SELECT MANV FROM DA_VIEW_MY_NV) WITH CHECK OPTION;
 /
GRANT SELECT ON DA_VIEW_MY_NV_PHANCONG TO DA_RL_QLTRUCTIEP;
 
CREATE OR REPLACE TRIGGER DA_UTR_INSERT_NV_PC
INSTEAD OF INSERT ON DA_VIEW_MY_NV_PHANCONG FOR EACH ROW
DECLARE
    URS VARCHAR2(50);
    DA_COUNT NUMBER;
    NV_COUNT NUMBER;
BEGIN
     SELECT USER INTO URS FROM DUAL;
     SELECT COUNT(MADA) INTO DA_COUNT FROM DA_TABLE_DEAN WHERE MADA = :NEW.MADA;
     SELECT COUNT( MANV) INTO NV_COUNT FROM DA_VIEW_MY_NV WHERE MANV = :NEW.MANV;
    IF DA_COUNT = 1 AND NV_COUNT = 1 AND :NEW.THOIGIAN IS NOT NULL AND :NEW.THOIGIAN > 0
    THEN
        INSERT INTO DA_TABLE_PHANCONG (MANV, MADA, THOIGIAN) 
        VALUES (:NEW.MANV, :NEW.MADA, :NEW.THOIGIAN);
    ELSIF DA_COUNT = 1 AND NV_COUNT = 1 AND :NEW.THOIGIAN IS NULL
    THEN
        INSERT INTO DA_TABLE_PHANCONG (MANV, MADA, THOIGIAN) 
        VALUES (:NEW.MANV, :NEW.MADA, 0);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER DA_UTR_UPDATE_NV_PC
INSTEAD OF UPDATE ON DA_VIEW_MY_NV_PHANCONG FOR EACH ROW
DECLARE
    URS VARCHAR2(50);
    NV_COUNT NUMBER;
BEGIN
      SELECT COUNT( MANV) INTO NV_COUNT FROM DA_VIEW_MY_NV WHERE MANV = :OLD.MANV;
     IF NV_COUNT != 0 AND :NEW.THOIGIAN IS NOT NULL
     THEN
        IF :OLD.MADA IS NULL
        THEN
            UPDATE DA_TABLE_PHANCONG SET THOIGIAN = :NEW.THOIGIAN WHERE MANV = :OLD.MANV;
        ELSIF :OLD.MADA IS NOT NULL
        THEN
            UPDATE DA_TABLE_PHANCONG SET THOIGIAN = :NEW.THOIGIAN WHERE MADA = :OLD.MADA AND MANV = :OLD.MANV;
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER DA_UTR_DELETE_NV_PC
INSTEAD OF DELETE ON DA_VIEW_MY_NV_PHANCONG FOR EACH ROW
DECLARE
    URS VARCHAR2(50);
    NV_COUNT NUMBER;
BEGIN
      SELECT COUNT( MANV) INTO NV_COUNT FROM DA_VIEW_MY_NV WHERE MANV = :OLD.MANV;
     IF NV_COUNT != 0 
     THEN
        IF :OLD.MADA IS NULL
        THEN
           DELETE FROM DA_TABLE_PHANCONG WHERE MANV = :OLD.MANV;
        ELSIF :OLD.MADA IS NOT NULL
        THEN
            DELETE FROM DA_TABLE_PHANCONG WHERE MADA = :OLD.MADA AND MANV = :OLD.MANV;
        END IF;
    END IF;
END;
/
GRANT SELECT, INSERT, UPDATE, DELETE ON DA_VIEW_MY_NV_PHANCONG TO DA_RL_TRUONGPHONG;
--PRIV OF TAICHINH
GRANT SELECT ON DA_TABLE_PHANCONG TO DA_RL_TAICHINH;
CREATE OR REPLACE VIEW DA_VIEW_TAICHINH_NV
AS
 SELECT MANV,TENNV,PHAI,NGAYSINH,DIACHI,SODT,LUONG,PHUCAP,VAITRO, MANQL,PHG FROM DA_TABLE_NHANVIEN;
/
CREATE OR REPLACE TRIGGER DA_UTR_UPDATE_TC_NV
INSTEAD OF UPDATE ON DA_VIEW_TAICHINH_NV FOR EACH ROW
BEGIN
    IF :NEW.LUONG IS NOT NULL
    THEN 
    UPDATE DA_TABLE_NHANVIEN SET LUONG = :NEW.LUONG WHERE MANV = :OLD.MANV;
    END IF;
    IF :NEW.PHUCAP IS NOT NULL
    THEN
    UPDATE DA_TABLE_NHANVIEN SET PHUCAP = :NEW.PHUCAP WHERE MANV = :OLD.MANV;
    END IF;
END;
/
GRANT SELECT ON DA_VIEW_TAICHINH_NV TO DA_RL_TAICHINH;
GRANT UPDATE(LUONG,PHUCAP) ON DA_VIEW_TAICHINH_NV TO DA_RL_TAICHINH;
--PRIV OF NHANSU
GRANT SELECT ON DA_TABLE_PHONGBAN TO DA_RL_NHANSU;
GRANT UPDATE(TRPHG, CHINHANH, LOAIPHONG) ON DA_TABLE_PHONGBAN TO DA_RL_NHANSU;

CREATE OR REPLACE VIEW DA_VIEW_ALL_NV
AS
 SELECT MANV,TENNV,PHAI,NGAYSINH,DIACHI,SODT,VAITRO, MANQL,PHG FROM DA_TABLE_NHANVIEN;
 /
CREATE OR REPLACE TRIGGER DA_UTR_INSERT_NV
INSTEAD OF INSERT ON DA_VIEW_ALL_NV FOR EACH ROW
DECLARE
    URS VARCHAR2(50);
    ID_NUM NUMBER;
    ID_ID VARCHAR2(20);
    L_COUNT NUMBER;
    OLD_TP VARCHAR2(20);
BEGIN
    SELECT COUNT(MAPB) INTO L_COUNT FROM DA_TABLE_PHONGBAN WHERE MAPB = :NEW.PHG;
    IF :NEW.TENNV IS NOT NULL AND (L_COUNT = 1 OR :NEW.PHG IS NULL)
    THEN
        IF :NEW.VAITRO IS NULL OR :NEW.VAITRO = 'NHAN VIEN'
        THEN
            SELECT SOLUONG INTO ID_NUM FROM DA_TABLE_COUNT WHERE OBJECT_NAME ='NHANVIEN';
            ID_ID := 'NV';
            UPDATE DA_TABLE_COUNT SET SOLUONG = SOLUONG+1 WHERE OBJECT_NAME ='NHANVIEN';
        ELSIF :NEW.VAITRO = 'QUAN LY'
        THEN
            ID_ID := 'QL';
            SELECT SOLUONG INTO ID_NUM FROM DA_TABLE_COUNT WHERE OBJECT_NAME ='QUANLY';
                UPDATE DA_TABLE_COUNT SET SOLUONG = SOLUONG+1 WHERE OBJECT_NAME ='QUANLY';
        ELSIF :NEW.VAITRO ='TRUONG PHONG'
        THEN
            ID_ID := 'TP';
            SELECT SOLUONG INTO ID_NUM FROM DA_TABLE_COUNT WHERE OBJECT_NAME ='TRUONGPHONG';
            UPDATE DA_TABLE_COUNT SET SOLUONG = SOLUONG+1 WHERE OBJECT_NAME ='TRUONGPHONG';
        ELSIF :NEW.VAITRO ='TAI CHINH'
        THEN
            ID_ID :='TC';
            SELECT SOLUONG INTO ID_NUM FROM DA_TABLE_COUNT WHERE OBJECT_NAME ='TAICHINH';
            UPDATE DA_TABLE_COUNT SET SOLUONG = SOLUONG+1 WHERE OBJECT_NAME ='TAICHINH';
        ELSIF :NEW.VAITRO ='NHAN SU'
        THEN
            ID_ID := 'NS';
            SELECT SOLUONG INTO ID_NUM FROM DA_TABLE_COUNT WHERE OBJECT_NAME ='NHANSU';
            UPDATE DA_TABLE_COUNT SET SOLUONG = SOLUONG+1 WHERE OBJECT_NAME ='NHANSU';
        ELSIF :NEW.VAITRO ='TRUONG DE AN'
        THEN
            ID_ID :='TDA';
            SELECT SOLUONG INTO ID_NUM FROM DA_TABLE_COUNT WHERE OBJECT_NAME ='TRGDEAN';
            UPDATE DA_TABLE_COUNT SET SOLUONG = SOLUONG+1 WHERE OBJECT_NAME ='TRGDEAN';
        ELSIF :NEW.VAITRO ='BAN GIAM DOC'
        THEN
            ID_ID :='GD';
            SELECT SOLUONG INTO ID_NUM FROM DA_TABLE_COUNT WHERE OBJECT_NAME ='GIAMDOC';
            UPDATE DA_TABLE_COUNT SET SOLUONG = SOLUONG+1 WHERE OBJECT_NAME ='GIAMDOC';
        END IF;
        ID_NUM := ID_NUM +1;
        ID_ID := ID_ID || TO_CHAR(ID_NUM);
        INSERT INTO DA_TABLE_NHANVIEN (MANV, TENNV, PHAI, SODT, LUONG, PHUCAP, VAITRO, PHG, DIACHI) 
        VALUES (ID_ID,:NEW.TENNV,:NEW.PHAI,:NEW.SODT,NULL,NULL,:NEW.VAITRO,:NEW.PHG,:NEW.DIACHI);
        IF :NEW.VAITRO = 'TRUONG PHONG' AND :NEW.PHG IS NOT NULL
        THEN
            SELECT TRPHG INTO OLD_TP FROM DA_TABLE_PHONGBAN WHERE MAPB = :NEW.PHG;
            UPDATE DA_TABLE_NHANVIEN SET VAITRO = 'NHAN VIEN' WHERE MANV = OLD_TP;
           UPDATE DA_TABLE_PHONGBAN SET TRPHG = ID_ID;
          --- EXECUTE IMMEDIATE 'GRANT DA_RL_TRUONGPHONG TO ' ||ID_ID;
        END IF;
    END IF;
END;
/
GRANT GRANT ANY ROLE TO DA_RL_NHANSU;
CREATE OR REPLACE TRIGGER DA_UTR_DELETE_NV
INSTEAD OF UPDATE ON DA_VIEW_ALL_NV FOR EACH ROW
DECLARE
    URS VARCHAR2(50);
    VT VARCHAR2(50);
    NV_COUNT NUMBER;
    PB_COUNT NUMBER;
    QL_COUNT NUMBER;
BEGIN
    SELECT COUNT(MANV) INTO NV_COUNT FROM DA_TABLE_NHANVIEN WHERE MANV = :OLD.MANV;
    SELECT VAITRO INTO VT FROM DA_TABLE_NHANVIEN WHERE MANV = :OLD.MANV;
    SELECT COUNT(MAPB) INTO PB_COUNT FROM DA_TABLE_PHONGBAN WHERE MAPB = :NEW.PHG;
    SELECT COUNT(MANV) INTO QL_COUNT FROM DA_TABLE_NHANVIEN WHERE MANV = :NEW.MANQL AND VAITRO = 'QUAN LY';
    IF NV_COUNT = 1
    THEN
        IF VT != :NEW.VAITRO AND :NEW.VAITRO != NULL
        THEN
            UPDATE DA_TABLE_NHANVIEN SET VAITRO = :NEW.VAITRO WHERE MANV = :OLD.MANV;
            IF :NEW.VAITRO = 'TRUONG PHONG' AND :NEW.PHG != :OLD.PHG
            THEN
                UPDATE DA_TABLE_NHANVIEN SET VAITRO = 'NHAN VIEN' WHERE MANV IN (SELECT TRPHG FROM DA_TABLE_PHONGBAN WHERE MAPB =:NEW.PHG);
                UPDATE DA_TABLE_PHONGBAN SET TRPHG = :OLD.MANV WHERE MAPB = :NEW.PHG;
             ELSIF :NEW.VAITRO = 'TRUONG PHONG' AND :NEW.PHG = :OLD.PHG
            THEN
                UPDATE DA_TABLE_NHANVIEN SET VAITRO = 'NHAN VIEN' WHERE MANV IN (SELECT TRPHG FROM DA_TABLE_PHONGBAN WHERE MAPB =:OLD.PHG);
                UPDATE DA_TABLE_PHONGBAN SET TRPHG = :OLD.MANV WHERE MAPB = :OLD.PHG;
            END IF;
        END IF;
        IF PB_COUNT =1
        THEN
              UPDATE DA_TABLE_NHANVIEN SET PHG = :NEW.PHG WHERE MANV = :OLD.MANV;
        END IF;
        IF QL_COUNT = 1
        THEN
            UPDATE DA_TABLE_NHANVIEN SET MANQL = :NEW.MANQL WHERE MANV = :OLD.MANV;
        END IF;
    END IF;
END;
/
GRANT SELECT, INSERT ON DA_VIEW_ALL_NV TO DA_RL_NHANSU;
GRANT UPDATE(PHG,MANQL,VAITRO) ON DA_VIEW_ALL_NV TO DA_RL_NHANSU;

--PRIV OF TRUONG DE AN
GRANT SELECT,INSERT, DELETE, UPDATE(TENDA,NGAYBD) ON DA_TABLE_DEAN TO DA_RL_TRUONGDEAN;

--AUDIT
BEGIN
   DBMS_FGA.drop_policy(
                                       object_schema => 'NGAN',
                                        object_name => 'DA_TABLE_PHANCONG',
                                               policy_name => 'DA_AUDIT_UP_PHANCONG_THOIGIAN' );
EXCEPTION
WHEN OTHERS THEN
      IF SQLCODE != -28102 THEN
         RAISE;
      END IF;
END;
/
BEGIN
     DBMS_FGA.add_policy(
     OBJECT_SCHEMA =>'NGAN',
     OBJECT_NAME=>'DA_TABLE_PHANCONG',
     POLICY_NAME =>'DA_AUDIT_UP_PHANCONG_THOIGIAN',
     STATEMENT_TYPES=>'UPDATE',
     AUDIT_COLUMN=>'THOIGIAN',
    ENABLE => TRUE);
END; 
/

BEGIN
   DBMS_FGA.drop_policy(
                                       object_schema => 'NGAN',
                                        object_name => 'DA_TABLE_NHANVIEN',
                                               policy_name => 'DA_AUDIT_READ_LP' );
EXCEPTION
WHEN OTHERS THEN
      IF SQLCODE != -28102 THEN
         RAISE;
      END IF;
END;
/
BEGIN
     DBMS_FGA.add_policy(
     OBJECT_SCHEMA =>'NGAN',
     OBJECT_NAME=>'DA_TABLE_NHANVIEN',
     POLICY_NAME =>'DA_AUDIT_READ_LP',
     STATEMENT_TYPES=>'SELECT',
     AUDIT_COLUMN=>'LUONG, PHUCAP',
     AUDIT_CONDITION=>'MANV != SYS_CONTEXT(''USERENV'',''SESSION_USER'') AND SYS_CONTEXT(''USERENV'',''SESSION_USER'') NOT IN (SELECT GRANTEE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = ''DA_RL_TAICHINH'')',
    ENABLE => TRUE);
END; 
/

BEGIN
   DBMS_FGA.drop_policy(
                                       object_schema => 'NGAN',
                                        object_name => 'DA_TABLE_NHANVIEN',
                                               policy_name => 'DA_AUDIT_UPDATE_LP' );
EXCEPTION
WHEN OTHERS THEN
      IF SQLCODE != -28102 THEN
         RAISE;
      END IF;
END;
/
BEGIN
     DBMS_FGA.add_policy(
     OBJECT_SCHEMA =>'NGAN',
     OBJECT_NAME=>'DA_TABLE_NHANVIEN',
     POLICY_NAME =>'DA_AUDIT_UPDATE_LP',
     STATEMENT_TYPES=>'UPDATE',
     AUDIT_COLUMN=>'LUONG, PHUCAP',
    AUDIT_CONDITION=>'MANV NOT IN (SELECT GRANTEE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = ''DA_RL_TAICHINH'')',
    ENABLE => TRUE);
END; 
/
SELECT * FROM DA_TABLE_DIARY;
INSERT INTO DA_TABLE_DIARY 
SELECT DBUSERNAME, EVENT_TIMESTAMP, ACTION_NAME, SQL_TEXT, FGA_POLICY_NAME, CLIENT_PROGRAM_NAME
FROM UNIFIED_AUDIT_TRAIL AU WHERE AU.FGA_POLICY_NAME LIKE 'DA_%' AND  DBUSERNAME NOT IN(SELECT DBUSERNAME FROM DA_TABLE_DIARY DA WHERE AU.DBUSERNAME = DA.DBUSERNAME AND DA.EVENT_TIMESTAMP = AU.EVENT_TIMESTAMP);


BEGIN
   DBMS_FGA.drop_policy(
                                       object_schema => 'NGAN',
                                        object_name => 'DA_TABLE_DIARY',
                                               policy_name => 'DA_AUDIT_READ_DIARY' );
EXCEPTION
WHEN OTHERS THEN
      IF SQLCODE != -28102 THEN
         RAISE;
      END IF;
END;
/
BEGIN
     DBMS_FGA.add_policy(
     OBJECT_SCHEMA =>'NGAN',
     OBJECT_NAME=>'DA_TABLE_DIARY',
     POLICY_NAME =>'DA_AUDIT_READ_DIARY',
     STATEMENT_TYPES=>'SELECT',
    ENABLE => TRUE);
END; 
/
/*
CREATE AUDIT POLICY DA_AUDIT_R_DIARYYYY
ACTIONS SELECT ON DA_TABLE_DIARY;

AUDIT POLICY DA_AUDIT_R_DIARYYYY;*/
